@page "/"
@using DelegationStation.Interfaces;
@using DelegationStationShared.Models;
@using DelegationStationShared.Enums;

@inject IDeviceTagDBService deviceTagDBService
@inject IDeviceDBService deviceDBService
@inject ILogger<Tags> logger
@inject NavigationManager nav
@inject IAuthorizationService authorizationService

@attribute [Authorize]

<h3>Devices</h3>

<AuthorizeView Context="authContext">
    <Authorized>

        <table class="table table-responsive">
            <thead>

                <tr>
                    <th>Make</th>
                    <th>Model</th>
                    <th>Serial Number</th>
                    <th>OS</th>
                    <th>Preferred Hostname</th>
                    <th>Tag</th>
                    <th>
                        State
                        <img src="css/bootstrap/icons/info-circle.svg" alt="Info Icon"
                            data-bs-toggle="tooltip" data-bs-placement="top" title="@statusDefinitions" />
                        @code {
                            private string? statusDefinitions
                            {
                                get
                                {
                                    string result = "";
                                    foreach (var status in StatusDefinitions)
                                    {
                                        result = result + status.Key.ToString() + ": " + status.Value.ToString() + "\n";
                                    }
                                    return result;
                                }
                            }
                        }
                    </th>
                    <th></th>
                </tr>
                <tr>
                    <td>
                        <input type="text" @bind="searchDevice.Make" class="form-control" placeholder="Make" />
                    </td>
                    <td>
                        <input type="text" @bind="searchDevice.Model" class="form-control" placeholder="Model" />
                    </td>
                    <td>
                        <input type="text" @bind="searchDevice.SerialNumber" class="form-control" placeholder="Serial Number" />
                    </td>
                    <td>
                        <InputSelect @bind-Value=searchDevice.OS class="form-select" id="OS">
                            <option selected value>Select OS</option>
                            @foreach (var os in Enum.GetValues(typeof(DeviceOS)))
                            {
                                @if ((DeviceOS) os != DeviceOS.Unknown)
                                {
                                  <option value=@os>@os</option>
                                }
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <input type="text" @bind="searchDevice.PreferredHostname" class="form-control" placeholder="Preferred Hostname" />
                    </td>
                    <td></td>
                    <td></td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick=@(() => GetDevicesSearch())>Search</button>
                    </td>
                </tr>
            </thead>
            <tbody>
                @if (devicesLoading)
                {
                    <tr>
                        <td colspan="4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </td>
                    </tr>
                }
                else if (devices.Count == 0)
                {
                    <tr>
                        <td colspan="4">No devices found.</td>
                    </tr>
                }
                else
                {

                    @foreach (Device device in devices)
                    {
                        <tr>
                            <td class="align-middle">@device.Make</td>
                            <td class="align-middle">@device.Model</td>
                            <td class="align-middle">@device.SerialNumber</td>
                            <td class="align-middle">@device.OS</td>
                            <td class="align-middle">@device.PreferredHostname</td>
                            <td class="align-middle">
                                @foreach (string t in device.Tags)
                                {
                                    <span class="badge bg-secondary">@deviceTags.Where(tag => tag.Id.ToString() == t).Select(tag => tag.Name.ToString()).FirstOrDefault()</span>
                                    <br />
                                }
                            </td>
                            <td class="align-middle">
                                @if (@device.Status == @DeviceStatus.Synced)
                                {
                                    <span class="badge rounded-pill bg-success" data-bas-toggle="tooltip" data-bs-placement="top" title="Last Sync: @device.LastCorpIdentitySync">@device.Status</span>
                                }
                                else if (@device.Status == @DeviceStatus.NotSyncing)
                                {
                                    <span class="badge rounded-pill bg-light text-dark" data-bas-toggle="tooltip" data-bs-placement="top" title="Device in Tag Not Set to Sync. Last confirmed: @device.LastCorpIdentitySync">Added</span>
                                }
                                else if (@device.Status == @DeviceStatus.Deleting)
                                {
                                    <span class="badge rounded-pill bg-dark" data-bas-toggle="tooltip" data-bs-placement="top" title="Marked To Delete: @device.MarkedToDeleteUTC">@device.Status</span>
                                }
                                else
                                {
                                    <span class="badge rounded-pill bg-info" data-bas-toggle="tooltip" data-bs-placement="top" title="Device Added: @device.ModifiedUTC">@device.Status</span>
                                }
                            </td>
                            <td class="align-middle" align="center">
                                @if (device.Status != @DeviceStatus.Deleting)
                                {
                                    <button type="button" class="btn btn-danger btn-sm text-nowrap" @onclick=@(() => RemoveDevice(device))>
                                        <span class="oi oi-trash d-sm-none"></span><section class="d-none d-sm-block"><span class="oi oi-trash"></span> Delete</section>
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <EditForm Model="@newDevice" OnValidSubmit="AddDevice" class="form-control mb-5">
            <DataAnnotationsValidator />
            <h4>Add device</h4>
            @if ((deviceAddValidationMessage.Value != null) && !deviceAddValidationMessage.Value.Equals(""))
            {
                <p class="text-danger">@deviceAddValidationMessage</p>
            }
            <div class="mb-3">
                <label for="DeviceMake" class="form-label">Device Make</label>
                <InputText @bind-Value=newDevice.Make class="form-control" id="DeviceMake"></InputText>
                <ValidationMessage For=@(() => newDevice.Make) />
            </div>
            <div class="mb-3">
                <label for="DeviceModel" class="form-label">Device Model</label>
                <InputText @bind-Value=newDevice.Model class="form-control" id="DeviceModel"></InputText>
                <ValidationMessage For=@(() => newDevice.Model) />
            </div>
            <div class="mb-3">
                <label for="SerialNumber" class="form-label">Serial Number</label>
                <InputText @bind-Value=newDevice.SerialNumber class="form-control" id="SerialNumber"></InputText>
                <ValidationMessage For=@(() => newDevice.SerialNumber) />
            </div>
            <div class="mb-3">
                <label for="Operating System" class="form-label">Device OS</label>
                <InputSelect @bind-Value=newDevice.OS class="form-select" id="OS">
                    <option disabled selected value>Select OS</option>
                    @foreach (var os in Enum.GetValues(typeof(DeviceOS)))
                    {
                        @if ((DeviceOS)os != DeviceOS.Unknown)
                        {
                            <option value=@os>@os</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For=@(() => newDevice.OS) />
            </div>
            <div class="mb-3">
                <label for="PreferredHostname" class="form-label">Preferred Hostname</label>
                <InputText @bind-Value=newDevice.PreferredHostname class="form-control" id="PreferredHostname"></InputText>
                <ValidationMessage For=@(() => newDevice.PreferredHostname) />
            </div>
            <div class="mb-3">
                <label for="Tags" class="form-label">Tags:</label>
                <input @bind=tagSearch @bind:event="oninput" class="form-control" placeholder="Filter tags">
                @foreach (DeviceTag tag in deviceTags.Where(t => t.Name.ToLower().Contains(tagSearch.ToLower())))
                {
                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" @onchange=@(() => AddRemoveTag(tag)) checked="@(newDevice.Tags.Any(t => t == tag.Id.ToString()))">
                        <label class="form-check-label" for="flexSwitchCheckDefault">@tag.Name</label>
                    </div>
                }
            </div>

            <input type="submit" class="btn btn-primary mb-3" value="Add" />
        </EditForm>

        @if (!string.IsNullOrEmpty(userMessage))
        {
            @if (userMessage.ToLower().Contains("error"))
            {
                <div class="alert alert-danger" role="alert">
                    @userMessage
                </div>
            }
            else
            {
                <div class="alert alert-success" role="alert">
                    @userMessage
                </div>
            }
        }

       <ConfirmMessage MessageBody=@confirmMessage ConfirmAction="@(async() =>await DeleteDevice())" @ref="ConfirmDelete" />

    </Authorized>

    <NotAuthorized>
        <p>Not Authorized</p>
    </NotAuthorized>
</AuthorizeView>





