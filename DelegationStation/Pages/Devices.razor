@page "/"
@using DelegationStation.Services;
@using DelegationStationShared.Models;

@inject IDeviceTagDBService deviceTagDBService
@inject IDeviceDBService deviceDBService
@inject ILogger<Tags> logger
@inject NavigationManager nav
@inject IConfiguration config

@attribute [Authorize]

<h3>Devices</h3>

<AuthorizeView Context="authContext">
    <Authorized>
        
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Make</th>
                    <th>Model</th>
                    <th>Serial Number</th>
                    <th>Tag</th>
                </tr>
            </thead>
            <tbody>
                @if(devicesLoading)
                {
                    <tr>
                        <td colspan="4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </td>
                    </tr>
                }
                else if (devices.Count == 0)
                {
                    <tr>
                        <td colspan="4">No devices found.</td>
                    </tr>
                }
                else
                {
                    @foreach (Device device in devices)
                    {
                        <tr>
                            <td>@device.Make</td>
                            <td>@device.Model</td>
                            <td>@device.SerialNumber</td>
                            <td>
                                @foreach (string t in device.Tags)
                                {
                                    <span class="badge bg-secondary">@deviceTags.Where(tag => tag.Id.ToString() == t).Select(tag => tag.Name.ToString()).FirstOrDefault()</span>
                                    <br />
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="row mb-4">
            <div class="col">
                <input type="text" @bind="searchDevice.Make" class="form-control" placeholder="Make" />
            </div>
            <div class="col">
                <input type="text" @bind="searchDevice.Model" class="form-control" placeholder="Model" />
            </div>
            <div class="col">
                <input type="text" @bind="searchDevice.SerialNumber" class="form-control" placeholder="Serial Number" />
            </div>
            <div class="col">
                <button type="button" class="btn btn-success" @onclick=@(() => GetDevicesSearch())>Search</button>
            </div>
        </div>
        <EditForm Model="@newDevice" OnValidSubmit="AddDevice" class="form-control mb-5">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <h4>Add device</h4>
            @if (!string.IsNullOrEmpty(deviceAddValidationMessage))
            {
                <p class="error-text">@deviceAddValidationMessage</p>
            }
            <div class="mb-3">
                <label for="DeviceMake" class="form-label">Device Make</label>
                <InputText @bind-Value=newDevice.Make class="form-control" id="DeviceMake"></InputText>
                <ValidationMessage For=@(() => newDevice.Make) />
            </div>
            <div class="mb-3">
                <label for="DeviceModel" class="form-label">Device Model</label>
                <InputText @bind-Value=newDevice.Model class="form-control" id="DeviceModel"></InputText>
                <ValidationMessage For=@(() => newDevice.Model) />
            </div>
            <div class="mb-3">
                <label for="SerialNumber" class="form-label">Serial Number</label>
                <InputText @bind-Value=newDevice.SerialNumber class="form-control" id="SerialNumber"></InputText>
                <ValidationMessage For=@(() => newDevice.SerialNumber) />
            </div>
            <div class="mb-3">
                <label for="Tags" class="form-label">Tags:</label>
                <input @bind=tagSearch @bind:event="oninput" class="form-control" placeholder="Filter tags">
                @foreach (DeviceTag tag in deviceTags.Where(t => t.Name.ToLower().Contains(tagSearch.ToLower())))
                {
                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" @onchange=@(() => AddRemoveTag(tag)) checked="@((newDevice.Tags.Where(t => t == tag.Id.ToString()).Count() > 0) ? "checked" : null)">
                        <label class="form-check-label" for="flexSwitchCheckDefault">@tag.Name</label>
                    </div>
                }
            </div>

            <input type="submit" class="btn btn-primary mb-3" value="Add" />
        </EditForm>
    </Authorized>
    <NotAuthorized>
        <p>Not Authorized</p>
    </NotAuthorized>
</AuthorizeView>






@code {
  [CascadingParameter]
  public Task<AuthenticationState>? AuthState { get; set; }
  private AuthenticationState? authState;
  private List<string> groups = new List<string>();
  private List<Device> devices = new List<Device>();
  private List<DeviceTag> deviceTags = new List<DeviceTag>();
  private Device newDevice = new Device();
  private Role userRole = new Role() { Id = Guid.Empty, Name = "None", Attributes = new List<AllowedAttributes>() {}, SecurityGroups = false, AdministrativeUnits = false };
  private string tagSearch = "";
  private string deviceAddValidationMessage = "";
  private int pageSize = 10;
  private int currentPage = 0;
  private string search = "";
  private Device searchDevice = new Device();
  private bool devicesLoading = true;


  protected override async Task OnInitializedAsync()
  {
    if (AuthState != null)
    {
      authState = await AuthState;
    }
    UpdateClaims();
    UpdateUserRole();
    await GetTags();
    await GetDevices();        
  }

  private void UpdateUserRole()
  {
    string defaultGroup = config.GetSection("DefaultAdminGroupObjectId").Value ?? "";
    if (groups.Contains(defaultGroup) && !string.IsNullOrEmpty(defaultGroup))
    {
      userRole = new Role() { Id = Guid.Empty, Name = "Admin", Attributes = new List<AllowedAttributes>() { AllowedAttributes.All }, SecurityGroups = true, AdministrativeUnits = true };
      return;
    }
    else if(deviceTags.Count > 0)
    {
      List<Role> roles = new List<Role>();
      foreach(DeviceTag t in deviceTags)
      {
        foreach(RoleDelegation rd in t.RoleDelegations)
        {
          roles.Add(rd.Role);
        }
      }            
    }        
  }

  private void UpdateClaims()
  {
    groups = new List<string>();
    var groupClaims = authState?.User.Claims.Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role" || c.Type == "roles");

    if(groupClaims == null)
    {
      return;
    }

    foreach (var c in groupClaims)
    {
      groups.Add(c.Value);
    }
  }

  private async Task GetTags()
  {
    try
    {
      deviceTags = await deviceTagDBService.GetDeviceTagsAsync(groups);
    }
    catch(Exception ex)
    {
      logger.LogError($"Error retrieving tags.\n{ex.Message}");
    }
  }

  private async Task GetDevices()
  {        
    try
    {
      devices = await deviceDBService.GetDevicesAsync(groups, search, pageSize, currentPage);
    }
    catch(Exception ex)
    {
      logger.LogError($"Error retreiving Devices.\n{ex.Message}");
    }
    finally
    {
      devicesLoading = false;
    }
  }

  private async Task GetDevicesSearch()
  {
    try
    {
      devices = await deviceDBService.GetDevicesSearchAsync(searchDevice.Make, searchDevice.Model, searchDevice.SerialNumber);
    }
    catch (Exception ex)
    {
      logger.LogError($"Error retreiving Devices.\n{ex.Message}");
    }
  }

  private async Task AddDevice()
  {
    try
    {
      string Id = deviceTags.Select(t => t.Id.ToString()).FirstOrDefault() ?? "";
      if(newDevice.Tags.Count < 1 && !string.IsNullOrEmpty(Id))
      {
        newDevice.Tags.Add(Id);
      }
      else if (newDevice.Tags.Count < 1)
      {
        deviceAddValidationMessage = "Device must have at least one Tag";
        return;
      } 
      else if(newDevice.Tags.Count > 1)
      {
        deviceAddValidationMessage = "Device must only have one Tag";
        return;
      }
      newDevice.ModifiedUTC = DateTime.UtcNow;
      newDevice.AddedBy = authState?.User.Claims.First(c => c.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier").Value.ToString();
      Device resp = await deviceDBService.AddOrUpdateDeviceAsync(newDevice);
            devices.Add(resp);
            newDevice = new Device();
            deviceAddValidationMessage = "";
        }
        catch (Exception ex)
        {
            Guid c = Guid.NewGuid();
            deviceAddValidationMessage = $"Error adding tags.\nCorrelation Id:{c.ToString()}";
            logger.LogError($"Error adding tags.\nCorrelation Id:{c.ToString()}\n{ex.Message}\n");
        }
    }

    private void AddRemoveTag(DeviceTag tag)
    {
        if(newDevice.Tags.Contains(tag.Id.ToString()))
        {
            newDevice.Tags.Remove(tag.Id.ToString());
        }
        else
        {
            newDevice.Tags.Clear();
            newDevice.Tags.Add(tag.Id.ToString());
        }
    }
}
