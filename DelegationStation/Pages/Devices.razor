@page "/"
@using DelegationStation.Interfaces;
@using DelegationStationShared.Models;

@inject IDeviceTagDBService deviceTagDBService
@inject IDeviceDBService deviceDBService
@inject ILogger<Tags> logger
@inject NavigationManager nav
@inject IAuthorizationService authorizationService

@attribute [Authorize]

<h3>Devices</h3>

<AuthorizeView Context="authContext">
    <Authorized>

        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Make</th>
                    <th>Model</th>
                    <th>Serial Number</th>
                    <th>Tag</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (devicesLoading)
                {
                    <tr>
                        <td colspan="4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </td>
                    </tr>
                }
                else if (devices.Count == 0)
                {
                    <tr>
                        <td colspan="4">No devices found.</td>
                    </tr>
                }
                else
                {
                    @foreach (Device device in devices)
                    {
                        <tr>
                            <td>@device.Make</td>
                            <td>@device.Model</td>
                            <td>@device.SerialNumber</td>
                            <td>
                                @foreach (string t in device.Tags)
                                {
                                    <span class="badge bg-secondary">@deviceTags.Where(tag => tag.Id.ToString() == t).Select(tag => tag.Name.ToString()).FirstOrDefault()</span>
                                    <br />
                                }
                            </td>
                            <td class="align-middle">
                                <button type="button" class="btn btn-danger btn-sm text-nowrap" @onclick=@(() => RemoveDevice(device))>
                                    <span class="oi oi-trash d-sm-none"></span><section class="d-none d-sm-block"><span class="oi oi-trash"></span> Delete</section>
                                </button>

                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="row mb-4">
            <div class="col">
                <input type="text" @bind="searchDevice.Make" class="form-control" placeholder="Make" />
            </div>
            <div class="col">
                <input type="text" @bind="searchDevice.Model" class="form-control" placeholder="Model" />
            </div>
            <div class="col">
                <input type="text" @bind="searchDevice.SerialNumber" class="form-control" placeholder="Serial Number" />
            </div>
            <div class="col">
                <button type="button" class="btn btn-success" @onclick=@(() => GetDevicesSearch())>Search</button>
            </div>
        </div>
        <EditForm Model="@newDevice" OnValidSubmit="AddDevice" class="form-control mb-5">
            <DataAnnotationsValidator />
            <h4>Add device</h4>
            @if ((deviceAddValidationMessage.Value != null) && !deviceAddValidationMessage.Value.Equals(""))
            {
                <p class="text-danger">@deviceAddValidationMessage</p>
            }
            <div class="mb-3">
                <label for="DeviceMake" class="form-label">Device Make</label>
                <InputText @bind-Value=newDevice.Make class="form-control" id="DeviceMake"></InputText>
                <ValidationMessage For=@(() => newDevice.Make) />
            </div>
            <div class="mb-3">
                <label for="DeviceModel" class="form-label">Device Model</label>
                <InputText @bind-Value=newDevice.Model class="form-control" id="DeviceModel"></InputText>
                <ValidationMessage For=@(() => newDevice.Model) />
            </div>
            <div class="mb-3">
                <label for="SerialNumber" class="form-label">Serial Number</label>
                <InputText @bind-Value=newDevice.SerialNumber class="form-control" id="SerialNumber"></InputText>
                <ValidationMessage For=@(() => newDevice.SerialNumber) />
            </div>
            <div class="mb-3">
                <label for="Tags" class="form-label">Tags:</label>
                <input @bind=tagSearch @bind:event="oninput" class="form-control" placeholder="Filter tags">
                @foreach (DeviceTag tag in deviceTags.Where(t => t.Name.ToLower().Contains(tagSearch.ToLower())))
                {
                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" @onchange=@(() => AddRemoveTag(tag)) checked="@((newDevice.Tags.Where(t => t == tag.Id.ToString()).Count() > 0) ? "checked" : null)">
                        <label class="form-check-label" for="flexSwitchCheckDefault">@tag.Name</label>
                    </div>
                }
            </div>

            <input type="submit" class="btn btn-primary mb-3" value="Add" />
        </EditForm>

        @if (!string.IsNullOrEmpty(userMessage))
        {
            @if (userMessage.ToLower().Contains("error"))
            {
                <div class="alert alert-danger" role="alert">
                    @userMessage
                </div>
            }
            else
            {
                <div class="alert alert-success" role="alert">
                    @userMessage
                </div>
            }
        }
    </Authorized>
    <NotAuthorized>
        <p>Not Authorized</p>
    </NotAuthorized>
</AuthorizeView>

<ConfirmMessage MessageBody=@confirmMessage ConfirmAction="@(() => DeleteDevice())" @ref="ConfirmDelete" />




