@page "/DevicesBulkAction"
@using System
@using System.IO
@using System.Globalization
@* @using Microsoft.AspNetCore.Components.QuickGrid *@
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations;
@using DelegationStation.Services;
@using DelegationStation.Models;
@using DelegationStationShared.Models;
@using CsvHelper;
@using CsvHelper.Configuration;
@inject ILogger<DeviceBulkAction> logger
@inject IWebHostEnvironment Environment
@inject IDeviceDBService deviceDBService
@inject IDeviceTagDBService deviceTagDBService
@inject IConfiguration config
@inject IAuthorizationService authorizationService

@attribute [Authorize]

<div class="container">
    <div class="row align-items-start mt-3">
        <div class="col">
            <h3>Upload Device Actions</h3>
        </div>
    </div>
    <div class="row align-items-start mt-3">
        <div class="col-12 col-lg-6">
            <p>
                Upload a csv file with the following format:
                <ul>
                    <li>Make,Model,SerialNumber,Action (add,remove)</li>
                    <li>Make,Model,SerialNumber,Action (add,remove)</li>
                    <li>Make,Model,SerialNumber,Action (add,remove)</li>
                </ul>
            </p>
        </div>
        <div class="col-12  col-lg-6 card p-3">
            <p>
                Example:
                <ul>
                    <li>Microsoft Surface,Laptop 5,246813579,add</li>
                    <li>Microsoft Surface,Laptop 5,246813579,remove</li>
                </ul>
            </p>
        </div>
    </div>
    <div class="row align-items-start mt-3">
        <div class="col">
            <p>
                <label>
                    Upload @maxAllowedFiles file up to @GetBytes(maxFileSize):
                    <InputFile OnChange="@LoadFiles" />
                </label>
            </p>
        </div>
    </div>
  



@if (isLoading)
{
        <div class="row align-items-start mt-3">
            <div class="col">
                <p>Uploading...</p>
            </div>
        </div>    
}
else
{
    
    @if(fileError.Count > 0)
    {
            <div class="row align-items-start mt-2 mb-2">
                <div class="col-6 error-ui">
                    <p>File Errors:</p>
                    <ol>
                        @foreach (var error in fileError)
                        {
                            @* <li class="flashError">@error</li> *@
                            <li>
                              <span style="white-space: pre-line" class="flashError">@error</span>
                            </li>
                        }
                    </ol>
                </div>
            </div>
            
    }
    
        <div class="row align-items-start mt-2">
            <div class="col-6">
                <label for="Tags" class="form-label">Tags:</label>
                <input @bind=tagSearch @bind:event="oninput" class="form-control" placeholder="Filter tags">
                @foreach (DeviceTag tag in deviceTags.Where(t => t.Name.ToLower().Contains(tagSearch.ToLower())))
                {
                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" @onchange=@(() => AddRemoveTag(tag)) checked="@((appliedTags.Where(t => t == tag.Id.ToString()).Count() > 0) ? "checked" : null)">
                        <label class="form-check-label" for="flexSwitchCheckDefault">@tag.Name</label>
                    </div>
                }
            </div>
        </div>
        <div class="row align-items-start mt-2">
            <div class="col">
                <button type="button" class="btn btn-primary mt-2 @(isUpdating ? "disabled" : "" )" @onclick=@UpdateDevices title="Run actions on data">Add / Remove Devices</button>
                <a class="btn btn-success mt-2 @((appliedTags?.Count() < 1) || isUpdating ? "disabled" : "" )" href="/api/BulkDevice?id=@(appliedTags?.FirstOrDefault() ?? "")">Download Devices</a>
                <button type="button" class="btn btn-danger mt-2 @(isUpdating ? "disabled" : "" )" @onclick=@Clear title="Remove all data references">Clear</button>
            </div>
        </div>

    <div class="pt-2 pb-2">
        
    </div>

    @if (!string.IsNullOrEmpty(userMessage))
    {
        @if (userMessage.ToLower().Contains("error"))
        {
            <div class="alert alert-danger" role="alert">
                @userMessage
            </div>
        }
        else
        {
            <div class="alert alert-success" role="alert">
                @userMessage
            </div>
        }
    }

    @if(isUpdating || completedDevices > 0)
    {
        @if(isUpdating)
        {
            <p>Running</p>
        }
        else
        {
            <p>Complete</p>
        }
        <p>Currently completed @(completedDevices) devices out of @(devices.Count).</p>

        <div class="progress">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-info progress-data" style="width: calc((@completedDevices / @totalDevices) * 100%);" role="progressbar" aria-label="Progress uploading" aria-valuenow="@completedDevices" aria-valuemin="0" aria-valuemax="@totalDevices"></div>
        </div>
          
    }
    @if(updateErrors.Count > 0)
    {
        <div class="error-ui mt-3 mb-3">
            Update Errors:
            <ol>
                @foreach (var updateError in updateErrors)
                {
                    <li>
                        <span style="white-space: pre-line" class="flashError">@updateError</span>
                    </li>
                }
            </ol>
        </div>
    }


    @if(devices.Count > 0)
    {
        <b>Device data preview</b>
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Make</th>
                    <th>Model</th>
                    <th>Serial Number</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (DeviceBulk device in devices)
                {
                    <tr>
                        <td>@device.Make</td>
                        <td>@device.Model</td>
                        <td>@device.SerialNumber</td>
                        <td>@device.Action</td>
                    </tr>
                }
            </tbody>
        </table>
    }

        <div>
       @*    Swap out table with quick grid when we switch back to .NET8
    <Microsoft.AspNetCore.Components.QuickGrid.QuickGrid Items="@loadedDevices" Pagination="@pagination" Class="table table-striped table-sm">
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Make" Property="@(p => p.Make)" />
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Model" Property="@(p => p.Model)" />
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Serial Number" Property="@(p => p.SerialNumber)" />
        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Action" Property="@(p => p.Action)" />
    </Microsoft.AspNetCore.Components.QuickGrid.QuickGrid>
 *@    </div>
    @* <Paginator State="@pagination" /> *@
}
</div>
@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }
    private System.Security.Claims.ClaimsPrincipal user = new System.Security.Claims.ClaimsPrincipal();
    private string userId = string.Empty;
    private string userName = string.Empty;

    private List<DeviceTag> deviceTags = new List<DeviceTag>();
    private List<string> groups = new List<string>();
    private string tagSearch = "";
    private List<string> appliedTags = new();

    private List<IBrowserFile> loadedFiles = new();

    private long maxFileSize = 1024 * 30000;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private List<DeviceBulk> devices = new();
    private IQueryable<DeviceBulk> loadedDevices = new List<DeviceBulk>().AsQueryable();
    // PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private List<string> fileError = new();
    private int completedDevices = 0;
    private int totalDevices = 0;
    private bool isUpdating;
    private List<string> updateErrors = new();
    private string userMessage = string.Empty;


    // private double percent = 0;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState is not null)
        {
            var authState = await AuthState;
            user = authState?.User ?? new System.Security.Claims.ClaimsPrincipal();
            userName = user.Claims.Where(c => c.Type == "name").Select(c => c.Value.ToString()).FirstOrDefault() ?? "";
            //userId = user.Claims.Where(c => c.Issuer == "http://schemas.microsoft.com/identity/claims/objectidentifier").Select(c => c.Value.ToString()).FirstOrDefault() ?? "";
            userId = user.Claims.Where(c => c.Type == "http://schemas.microsoft.com/identity/claims/objectidentifier").Select(c => c.Value.ToString()).FirstOrDefault() ?? "";
        }

        UpdateClaims();
        await GetTags();
        // pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    private async Task GoToPageAsync(int pageIndex)
    {
        // await pagination.SetCurrentPageIndexAsync(pageIndex);
    }

    // private string? PageButtonClass(int pageIndex)
    //     => pagination.CurrentPageIndex == pageIndex ? "current" : null;

    // private string? AriaCurrentValue(int pageIndex)
    //     => pagination.CurrentPageIndex == pageIndex ? "page" : null;


    private void UpdateClaims()
    {
        groups = new List<string>();
        var groupClaims = user.Claims.Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role" || c.Type == "roles");

        if (groupClaims == null)
        {
            return;
        }

        foreach (var c in groupClaims)
        {
            groups.Add(c.Value);
        }
    }

    private async Task GetTags()
    {
        Guid c= new Guid();
        userMessage = string.Empty;
        try
        {
            deviceTags = await deviceTagDBService.GetDeviceTagsAsync(groups);
        }
        catch (Exception ex)
        {
      logger.LogError($"Error retrieving tags.\n{ex.Message}\nUser: {userName} {userId}.\nCorrelation Id:{c.ToString()}");
      }
    }

    private void AddRemoveTag(DeviceTag tag)
    {
        if (appliedTags.Contains(tag.Id.ToString()))
        {
            appliedTags.Remove(tag.Id.ToString());
        }
        else
        {
            appliedTags.Clear();
            appliedTags.Add(tag.Id.ToString());
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        Guid c = new Guid();
        userMessage = string.Empty;

        isLoading = true;
        loadedFiles.Clear();
        fileError = new();
        string path = "";
        devices = new();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);
                if (file.Size > maxFileSize)
                {
                    isLoading = false;
                    fileError.Add("File too large");
                    return;
                }


                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var rootFolder = Path.Combine(Environment.ContentRootPath,
                    Environment.EnvironmentName, "unsafe_uploads");
                if (!Directory.Exists(rootFolder))
                {
                    Directory.CreateDirectory(rootFolder);
                }
                path = Path.Combine(rootFolder,
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                fs.Dispose();

                // Read the file and parse it line by line.
                var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    HasHeaderRecord = false
                };
                using (var reader = new StreamReader(path))
                using (var csv = new CsvReader(reader,config))
                {

                    List<BulkDeviceEntry> bulkDevices = csv.GetRecords<BulkDeviceEntry>().ToList();
                    if (bulkDevices[0].Make == "Make" || bulkDevices[0].Model == "Model" || bulkDevices[0].SerialNumber == "SerialNumber" || bulkDevices[0].Action == "Action")
                    {
                       // Remove header if present
                        bulkDevices.RemoveAt(0);
                    }

                    foreach (BulkDeviceEntry entry in bulkDevices)
                    {

                            // Validate Make, Model, SerialNumber, Action
                            if(entry.Action.ToLower() != "add" && entry.Action.ToLower() != "remove")
                            {
                                var message = $"File parsing error.\nFile Name: {file.Name}\nDevice Entry: {entry.Make},{entry.Model},{entry.SerialNumber},{entry.Action}\nInvalid action. Action should be either add or remove.\nCorrelation Id: {c.ToString()}";
                                fileError.Add(message);
                                logger.LogWarning($"{message}\nUser: {userName} {userId}");
                                continue;
                            }

                        try
                        {

                            var newDevice = new DeviceBulk()
                                {
                                    Make = entry.Make,
                                    Model = entry.Model,
                                    SerialNumber = entry.SerialNumber,
                                    Action = (DeviceBulkAction)Enum.Parse(typeof(DeviceBulkAction), (entry.Action.ToLower()))                                    
                                };
                            var context = new ValidationContext(newDevice, null, null);
                            var results = new List<ValidationResult>();

                            if (!Validator.TryValidateObject(newDevice, context, results, true))
                            {
                                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                                sb.Append($"Device Entry: {entry.Make},{entry.Model},{entry.SerialNumber},{entry.Action}\n. Invalid input\n");
                                foreach(var result in results)
                                {
                                    sb.Append("\t" + result.ErrorMessage + "\n" ?? "");
                                };
                                sb.AppendLine($"Correlation Id: {c.ToString()}");
                                fileError.Add(sb.ToString());
                                logger.LogWarning($"{sb.ToString()}\nUser: {userName} {userId}");
                                continue;
                            }

                            devices.Add(newDevice);
                        } 
                        catch (Exception ex)
                        {
                            var message = $"File parsing error.\nFile Name: {file.Name}\nDevice Entry: {entry.Make},{entry.Model},{entry.SerialNumber},{entry.Action}\n{ex.Message}\nCorrelation Id: {c.ToString()}";
                            fileError.Add(message);
                            logger.LogError($"{message}\nUser: {userName} {userId}");
                            isLoading = false;
                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                var message = $"File upload error.\nFile Name: {file.Name}\n{ex.Message}\nCorrelation Id: {c.ToString()}";
                fileError.Add(message);
                logger.LogError($"{message}\nUser: {userName} {userId}");
            }
            finally
            {
                // Delete file from temporary location
                if (File.Exists(path))
                {
                    File.Delete(path);
                }
            }
        }
        loadedDevices = devices.AsQueryable();
        isLoading = false;
    }

    private string GetBytes(long bytes)
    {
        string[] suffixes = { "Bytes", "KB", "MB", "GB", "TB", "PB" };
        int counter = 0;
        decimal number = (decimal)bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number = number / 1024;
            counter++;
        }
        return string.Format("{0:n0} {1}", number, suffixes[counter]);
    }

    private async Task UpdateDevices()
    {
        Guid c = new Guid();
        userMessage = string.Empty;

        isUpdating = true;
        completedDevices = 0;
        totalDevices = devices.Count();
        updateErrors = new();

        string tagToApply = appliedTags.FirstOrDefault() ?? "";
        if(string.IsNullOrEmpty(tagToApply))
        {
            updateErrors.Add("Must select at least one tag.");
            isUpdating = false;
            return;
        }

        foreach(DeviceBulk device in devices)
        {
            if(string.IsNullOrEmpty(userId))
            {
                var message = $"Error: User ID not found. {userId}\nCorrelation Id: {c.ToString()}";
                updateErrors.Add(message);
                logger.LogError($"{message}\nUser: {userName} {userId}");
                isUpdating = false;
                return;
            }

            if(deviceTags.Any(t => t.Id.ToString() == tagToApply) == false)
            {
                var message = $"Error: Tag {tagToApply} not found.\nCorrelation Id: {c.ToString()}";
                updateErrors.Add(message);
                logger.LogError($"{message}\nUser: {userName} {userId}");
                isUpdating = false;
                return;
            }

            DeviceTag tag = deviceTags.First(t => t.Id.ToString() == tagToApply);

            if (authorizationService.AuthorizeAsync(user, tag, Authorization.DeviceTagOperations.BulkUpload).Result.Succeeded == false)
            {
                var message = $"Error: Unauthorized to apply tag. TagId: {tag.Id}\nCorrelation Id: {c.ToString()}";
                updateErrors.Add(message);
                logger.LogError($"{message}\nUser: {userName} {userId}");
                isUpdating = false;
                return;                
            }

            try
            {
                if (device.Action == DeviceBulkAction.add)
                {
                    Device d = new Device();
                    d.Make = device.Make;
                    d.Model = device.Model;
                    d.SerialNumber = device.SerialNumber;
                    d.ModifiedUTC = DateTime.UtcNow;
                    d.AddedBy = userId;
                    d.Tags.Add(tagToApply);
                    var deviceResult = await deviceDBService.AddOrUpdateDeviceAsync(d);
                    if(deviceResult == null)
                    {
                        var message = $"Bulk Updating Devices Error:\nMake: {device.Make}\nModel: {device.Model}\nSerialNumber: {device.SerialNumber}\nCorrelation Id: {c.ToString()}";
                        updateErrors.Add(message);
                        logger.LogError($"{message}\nUser: {userName} {userId}");
                    }
                }
                else if (device.Action == DeviceBulkAction.remove)
                {
                    Device? d = await deviceDBService.GetDeviceAsync(device.Make, device.Model, device.SerialNumber);
                    if(d != null)
                    {
                        // Validate the applied tag is on the device
                        if(!d.Tags.Contains(tagToApply))
                        {
                            var message = $"Bulk Updating Devices Error on Delete:\nMake: {device.Make}\nModel: {device.Model}\nSerialNumber: {device.SerialNumber}\nTag: {tagToApply} not found on device.\nCorrelation Id: {c.ToString()}";
                            updateErrors.Add(message);
                            logger.LogError($"{message}\nUser: {userName} {userId}");
                        }
                        else
                        {
                            await deviceDBService.DeleteDeviceAsync(d);
                            logger.LogInformation($"Device Deleted:\nMake: {device.Make}\nModel: {device.Model}\nSerialNumber: {device.SerialNumber}\nUser: {userName} {userId}");
                        }                        
                    }
                    else
                    {
                        var message = $"Bulk Updating Devices Error on Delete:\nMake: {device.Make}\nModel: {device.Model}\nSerialNumber: {device.SerialNumber}\nDevice not found.\nCorrelation Id: {c.ToString()}";
                        updateErrors.Add(message);
                        logger.LogError($"{message}\nUser: {userName} {userId}");
                    }
                }
                else
                {
                    var message = $"Bulk Updating Devices Error:\nMake: {device.Make}\nModel: {device.Model}\nSerialNumber: {device.SerialNumber}\nNo update action.\nCorrelation Id: {c.ToString()}";
                    updateErrors.Add(message);
                    logger.LogError($"{message}\nUser: {userName} {userId}");
                }
            }
            catch (Exception ex)
            {
                var message = $"Bulk Updating Devices Error:\nMake: {device.Make}\nModel: {device.Model}\nSerialNumber: {device.SerialNumber}\nCorrelation Id: {c.ToString()}";
                updateErrors.Add(message);
                logger.LogError($"{message}\n{ex.Message}\nUser: {userName} {userId}");
            }

            completedDevices++;
            StateHasChanged();
        }
        isUpdating = false;
    }

    private void Clear()
    {
        updateErrors.Clear();
        fileError.Clear();
        loadedFiles.Clear();
        devices.Clear();
        completedDevices = 0;
        totalDevices = 0;
    }
    
}