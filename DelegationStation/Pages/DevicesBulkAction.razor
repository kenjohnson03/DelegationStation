@page "/DevicesBulkAction"
@using System
@using System.IO
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations;
@using System.Text.RegularExpressions;
@using DelegationStation.Interfaces;
@using DelegationStationShared.Models;
@inject ILogger<DeviceBulkAction> logger
@inject IWebHostEnvironment Environment
@inject IDeviceDBService deviceDBService
@inject IDeviceTagDBService deviceTagDBService
@inject IConfiguration config
@inject IAuthorizationService authorizationService

@attribute [Authorize]

<div class="container">
    <div class="row align-items-start mt-3">
        <div class="col">
            <h3>Upload Device Actions</h3>
        </div>
    </div>
    <div class="row align-items-start mt-3">
        <div class="col-12 col-lg-6">
            <p>
                Upload a csv file with the following format:
                <ul>
                    <li>Make,Model,SerialNumber,OS,PreferredHostname, Action (add,remove)</li>
                    <li>Make,Model,SerialNumber,OS,PreferredHostname, Action (add,remove)</li>
                    <li>Make,Model,SerialNumber,OS,PreferredHostname, Action (add,remove)</li>
                </ul>
            </p>
        </div>
        <div class="col-12  col-lg-6 card p-3">
            <p>
                Example:
                <ul>
                    <li>Microsoft Surface,Laptop 5,246813579,Windows,host1,add</li>
                    <li>Microsoft Surface,Laptop 5,246823580,Windows,host2,add</li>
                    <li>Apple,Macbook Pro,246813579,,,remove</li>
                </ul>
                Note:  Preferred Hostname and OS fields are not used for removal.
            </p>
        </div>
    </div>
    <div class="row align-items-start mt-3">
        <div class="col">
            <p>
                <label>
                    Upload @maxAllowedFiles file up to @GetBytes(maxFileSize):
                    <InputFile OnChange="@LoadFiles" />
                </label>
            </p>
        </div>
    </div>




    @if (isLoading)
    {
        <div class="row align-items-start mt-3">
            <div class="col">
                <p>Uploading...</p>
            </div>
        </div>
    }
    else
    {

        @if (fileError.Count > 0)
        {
            <div class="row align-items-start mt-2 mb-2">
                <div class="col-6 error-ui">
                    <p>File Errors:</p>
                    <ol>
                        @foreach (var error in fileError)
                        {
                            <li class="flashError">@error</li>
                        }
                    </ol>
                </div>
            </div>

        }

        <div class="row align-items-start mt-2">
            <div class="col-6">
                <label for="Tags" class="form-label">Tags:</label>
                <input @bind=tagSearch @bind:event="oninput" class="form-control" placeholder="Filter tags">
                @foreach (DeviceTag tag in deviceTags.Where(t => t.Name.ToLower().Contains(tagSearch.ToLower())))
                {
                    <div class="form-check form-switch mt-2">
                        <input class="form-check-input" type="checkbox" @onchange=@(() => AddRemoveTag(tag)) checked="@((appliedTags.Where(t => t == tag.Id.ToString()).Count() > 0) ? "checked" : null)">
                        <label class="form-check-label" for="flexSwitchCheckDefault">@tag.Name</label>
                    </div>
                }
            </div>
        </div>
        <div class="row align-items-start mt-2">
            <div class="col">
                <button type="button" class="btn btn-primary mt-2 @(isUpdating ? "disabled" : "" )" @onclick=@UpdateDevices title="Run actions on data">Add / Remove Devices</button>
                <a class="btn btn-success mt-2 @((appliedTags?.Count() < 1) || isUpdating ? "disabled" : "" )" href="/api/BulkDevice?id=@(appliedTags?.FirstOrDefault() ?? "")">Download Devices</a>
                <button type="button" class="btn btn-danger mt-2 @(isUpdating ? "disabled" : "" )" @onclick=@Clear title="Remove all data references">Clear</button>
            </div>
        </div>

        <div class="pt-2 pb-2">
        </div>

        @if (!string.IsNullOrEmpty(userMessage))
        {
            @if (userMessage.ToLower().Contains("error"))
            {
                <div class="alert alert-danger" role="alert">
                    @userMessage
                </div>
            }
            else
            {
                <div class="alert alert-success" role="alert">
                    @userMessage
                </div>
            }
        }

        @if (isUpdating || completedDevices > 0)
        {
            @if (isUpdating)
            {
                <p>Running</p>
            }
            else
            {
                <p>Complete</p>
            }
            <p>Currently completed @(completedDevices) devices out of @(devices.Count).</p>

            <div class="progress">
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-info progress-data" style="width: calc((@completedDevices / @totalDevices) * 100%);" role="progressbar" aria-label="Progress uploading" aria-valuenow="@completedDevices" aria-valuemin="0" aria-valuemax="@totalDevices"></div>
            </div>

        }
        @if (updateErrors.Count > 0)
        {
            <div class="error-ui mt-3 mb-3">
                Update Errors:
                <ol>
                    @foreach (var updateError in updateErrors)
                    {
                        <li>
                            <span style="white-space: pre-line" class="flashError">@updateError</span>
                        </li>
                    }
                </ol>
            </div>
        }

        @if (devices.Count > 0)
        {
            <div>
                <Microsoft.AspNetCore.Components.QuickGrid.QuickGrid Items="@loadedDevices" Pagination="@pagination" Class="table table-striped table-sm">
                    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Make" Property="@(p => p.Make)" />
                    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Model" Property="@(p => p.Model)" />
                    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Serial Number" Property="@(p => p.SerialNumber)" />
                        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Operating System" Property="@(p => p.OS)" />
                        <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Preferred Hostname" Property="@(p => p.PreferredHostname)" />
                    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Title="Action" Property="@(p => p.Action)" />
                </Microsoft.AspNetCore.Components.QuickGrid.QuickGrid>
            </div>
            <Paginator State="@pagination" />
        }
    }
</div>
