@page "/Role/{Id}"
@using DelegationStationShared.Models;
@using DelegationStationShared.Enums;
@using DelegationStation.Shared;
@using DelegationStation.Interfaces;

@inject IRoleDBService roleDBService
@inject NavigationManager nav
@inject ILogger<RoleEdit> logger
@inject IHttpContextAccessor httpContextAccessor
@inject IConfiguration config
@inject IAuthorizationService authorizationService



@attribute [Authorize]

<h3>Role Edit</h3>
<AuthorizeView Context="userContext" Policy="DelegationStationAdmin">
    <Authorized>

        @if (role != null)
        {
            <EditForm Model="@role" OnSubmit="SaveRole">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="Name" class="form-label">Name</label>
                    <InputText @bind-Value=role.Name class="form-control" id="Name"></InputText>
                </div>
                <h4>Editable Attributes</h4>
                <div class="container p-0">
                    @{
                        foreach (var attr in Enum.GetValues(typeof(AllowedAttributes)))
                        {
                            if ((AllowedAttributes)attr == AllowedAttributes.All ||
                            (AllowedAttributes)attr == AllowedAttributes.None)
                            {
                                continue;
                            }

                            bool isChecked = role.Attributes.Contains((AllowedAttributes)attr);

                            <div class="row mb-2">
                                <div class="col">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" checked="@isChecked" @oninput=@((e) => AttributesChanged((AllowedAttributes)attr, e))>
                                        <label class="form-check-label" for="flexSwitchCheckDefault">@((AllowedAttributes)attr)</label>
                                    </div>
                                </div>
                                <div class="col">
                                </div>
                            </div>
                            <div class="row">
                            </div>
                        }
                    }
                </div>


                <div class="mb-3">
                    <label for="SecurityGroups" class="form-label">Allowed to edit Security Groups</label>
                    <span>Delegation Station must have access to the security group to make changes.</span>
                    <div class="form-check form-switch">
                        <InputCheckbox @bind-Value=role.SecurityGroups class="form-check-input" id="SecurityGroups"></InputCheckbox>
                        <ValidationMessage For=@(() => role.SecurityGroups) />
                    </div>
                </div>
                <div class="mb-3">
                    <label for="AdministrativeUnits" class="form-label">Allowed to edit Administrative Units</label>
                    <span>Delegation Station must have access to the administrative unit to make changes.</span>
                    <div class="form-check form-switch">
                        <InputCheckbox @bind-Value=role.AdministrativeUnits class="form-check-input" id="AdministrativeUnits"></InputCheckbox>
                        <ValidationMessage For=@(() => role.AdministrativeUnits) />
                    </div>
                </div>
                <button class="btn btn-secondary" type="button" @onclick=@(() => nav.NavigateTo("/Roles"))>Cancel</button>
                <button class="btn btn-success" type="submit">Save</button>

            </EditForm>
        }
        else
        {
            <p>Role not found</p>
        }


    </Authorized>
    <NotAuthorized>
        <h3>Not Authorized</h3>
    </NotAuthorized>
</AuthorizeView>

<DisplayMessage Message=@userMessage />


