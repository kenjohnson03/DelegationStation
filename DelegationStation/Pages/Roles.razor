@page "/Roles"
@using Microsoft.AspNetCore.Components.Authorization
@using DelegationStation.Interfaces
@using DelegationStationShared.Enums

@inject IRoleDBService roleDBService
@inject NavigationManager nav
@inject ILogger<RoleEdit> logger
@inject IConfiguration config
@inject IHttpContextAccessor httpContextAccessor
@inject IAuthorizationService authorizationService


@attribute [Authorize]



<h3>Roles</h3>

<AuthorizeView Policy="DelegationStationAdmin">
    <Authorized>

        @if (roles.Count > 0)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Editable Attributes</th>
                        <th>Edit Security Groups</th>
                        <th>Edit Administrative Units</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Role role in roles)
                    {
                        <tr>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>@role.Name</td>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>
                                @foreach (AllowedAttributes attr in role.Attributes.OrderBy(a => a))
                                {
                                    <p>@attr</p>
                                }
                            </td>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>
                                @if (role.SecurityGroups)
                                {
                                    <span>Yes</span>
                                }
                                else
                                {
                                    <span>No</span>
                                }
                            </td>
                            <td class="clickable" @onclick=@(() => nav.NavigateTo($"/Role/{role.Id.ToString()}"))>
                                @if (role.AdministrativeUnits)
                                {
                                    <span>Yes</span>
                                }
                                else
                                {
                                    <span>No</span>
                                }
                            </td>
                            <td class="align-middle">
                                <button type="button" class="btn btn-danger text-nowrap" @onclick=@(() => RemoveRole(role))><span class="oi oi-trash d-sm-none"></span><section class="d-none d-sm-block"><span class="oi oi-trash"></span> Delete</section></button>
                            </td>
                        </tr>

                    }
                </tbody>
            </table>
        }
        else if (loading)
        {
            <p>Loading...</p>
        }
        else
        {
            <p>No roles found</p>
        }


        <button class="btn btn-secondary" type="button" @onclick="@(() => nav.NavigateTo("/Role/" + Guid.Empty.ToString()))">New Role</button>
    </Authorized>
    <NotAuthorized>
        <h3>Not Authorized</h3>
        <p>User is unable to view, create, or edit roles.</p>
    </NotAuthorized>
</AuthorizeView>
<br />
<br />

<DisplayMessage Message="@userMessage" />

<ConfirmMessage MessageBody=@((MarkupString) "This will permanently delete the role and any delegations.") ConfirmAction="@(() => DeleteRole())" @ref="ConfirmDelete" />


